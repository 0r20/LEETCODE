https://leetcode.com/problems/combination-sum/
class Solution {
  private:
    void dfs(vector<int> &candidates, vector<vector<int>> &res, int start, int target, int currSum, vector<int> &path) {
        if (currSum == target) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < candidates.size(); i++) {
            if (currSum + candidates[i] <= target) {
                path.push_back(candidates[i]);
                dfs(candidates, res, i, target, currSum + candidates[i], path);
                path.pop_back();
            }
        }
        return;
    }

  public:
    vector<vector<int>> combinationSum(vector<int> &candidates, int target) {
        vector<vector<int>> res;
        if (candidates.empty()) {
            return res;
        }
        vector<int> path;
        dfs(candidates, res, 0, target, 0, path);
        return res;
    }
};
